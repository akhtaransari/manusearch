package com.makersharks.ManuSearch.entity;

import com.makersharks.ManuSearch.enums.ManufacturingProcess;
import com.makersharks.ManuSearch.enums.NatureOfBusiness;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.util.List;

/**
 * Represents a supplier entity in the system.
 * Maps to the "suppliers" table in the database.
 */
@Entity
@Table(name = "suppliers")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Supplier {

    /**
     * Unique identifier for each supplier.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long supplierId;

    /**
     * Name of the company.
     * Cannot be null or blank.
     */
    @NotBlank(message = "Company name is required")
    private String companyName;

    /**
     * Website URL of the company.
     * Cannot be null or blank.
     */
    @NotBlank(message = "Website URL is required")
    private String website;

    /**
     * Location of the supplier, represented by the city.
     * Cannot be null or blank.
     */
    @NotBlank(message = "Location is required")
    private String location;

    /**
     * The nature of the business of the supplier.
     * Uses an enum to represent different business scales.
     * Cannot be null.
     */
    @NotNull(message = "Nature of business is required")
    @Enumerated(EnumType.STRING)
    private NatureOfBusiness natureOfBusiness;

    /**
     * List of manufacturing processes the supplier is capable of.
     * Uses an enum to represent different manufacturing processes.
     * The fetch type is EAGER to load all processes with the supplier.
     * Cannot be null or empty.
     */
    @ElementCollection(fetch = FetchType.EAGER)
    @Enumerated(EnumType.STRING)
    @NotEmpty(message = "At least one manufacturing process is required")
    private List<ManufacturingProcess> manufacturingProcesses;

}
